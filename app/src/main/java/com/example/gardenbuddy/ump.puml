@startuml
skinparam style strict

title GardenBuddy - MVVM UML Diagram

' Organizzazione in package principali
package "data" {

  package "api" {

    class OpenWeatherMapService {
      + getWeatherData(location : String) : WeatherData
    }

    class GardenApiService {
      + getGardenById(@Path("userId") userId: String): Response<Garden>
      + getGardenByGardenId(@Path("gardenId") gardenId: Long): Response<Garden>
      + createGarden(@Body garden: Garden): Response<ApiResponse<Garden>>
      + updateGarden(@Path("gardenId") gardenId: Long, @Body garden: Garden): Response<ApiResponse<Garden>>
      + deleteGarden(@Path("gardenId") gardenId: Long): Response<ApiResponse<Garden>>
    }

    class GardenPlantApiService {
      + getGardenPlantsByGardenId(@Path("gardenId") gardenId: Long): Response<List<GardenPlant>>
      + getGardenPlantByGardenIdAndPlantId(@Path("gardenId") gardenId: Long, @Path("plantId") plantId: Long): Response<GardenPlant>
      + createGardenPlant(@Body gardenPlant: CreategardenplantDTO): Response<ApiResponse<GardenPlant>>
      + updateGardenPlant(@Path("gardenId") gardenId: Long, @Path("plantId") plantId: Long, @Body body: UpdateGardenPlantRequest): Response<ApiResponse<GardenPlant>>
      + deleteGardenPlant(@Path("gardenId") gardenId: Long, @Path("plantId") plantId: Long): Response<ApiResponse<GardenPlant>>
    }

    class PlantApiService {
      + searchPlantByName(@Query("name") name: String, @Query("limit") limit: Int = 1) : Response<ResponseDto>
      + searchPlantByPhoto(@Body request : SearchPhotoRequest): Response<ResponseDto>
      + getPlantById(@Path("plantId") plantId: Long) : Response<Plant>
    }
  }

  package "models" {
    class Garden {
      - id : Long
      - name : String
      - latitude : Double
      - longitude : Double
      - dimension : Double
      - photos : List<String>
      - user_id : String
      --
      + getId() : String
      + getName() : String
      + getLatitude() : Double
      + getLongitude() : Double
      + getDimension() : Double
      + getPhotos() : List<ByteArray>
      + getPlants() : List<Plant>
    }

    class Plant {
      - plantId : Long
      - scientificName : String
      - species : String
      - family : String
      - parent : String
      - kingdom : String
      --
      + getPlantId() : Long
      + getScientificName() : String
      + getSpecies() : String
      + getFamily() : String
      + getParent() : String
      + getKingdom() : String

    }

    class GardenPlant {
      - photos : List<String>
      - gardenId : Long
      - plantId : Long
      --
      + getPhotos() : List<String>
      + getPlantId() : Long
      + getGardenId() : Long
    }

    class User {
      - userId : String
      - name : String
      - birthDate : Date
      - email : String
      - weight : Double
      --
      + getUserId() : String
      + getName() : String
      + getBirthDate() : Date
      + getEmail() : String
      + getWeight() : Double
    }


    class WeatherData {
      - temperature : Double
      - humidity : Double
      - windSpeed : Double
      - description : String
      - value : String
      --
      + getTemperature() : Double
      + getHumidity() : Double
      + getWindSpeed() : Double
      + getDescription() : String
      + getValue() : String
    }
  }

  package "repositories" {

    class GardenRepository {
      + loadGarden(userId: String): Result<Garden>
      + loadGardenByGardenId(gardenId: Long): Result<Garden>
      + saveGarden(garden : Garden) : Result<Garden>
      + updateGarden(gardenId : Long, garden : Garden) : Result<Garden>
    }

    class WeatherRepository {
      + fetchWeatherData(location : String) : WeatherData
    }

    class PlantRepository {
      + loadPlant(plantId : Long) : Result<Plant>
      + searchPlant(photo: String, latitude: Double, longitude: Double): Result<List<Plant>>
      + searchPlant(name : String) : Result<List<Plant>>
    }

    class GardenPlantRepository {
      + loadGardenPlant(plantId: Long, gardenId: Long): Result<Pair<Plant, List<String>>>
      + loadGardenPlantsById(gardenId : Long) : Result<List<Pair<Plant, List<String>>>>
      + updateGardenPlant(gardenId : Long, plantId : Long, photos : List<String>) : Result<GardenPlant>
      + removePlant(plantId : Long, gardenId : Long) : Result<String>
      + addPlant(plantId : Long, gardenId : Long, photos : List<String>) : Result<GardenPlant>
    }

    class AuthRepository {
      + signIn(email : String, password : String)
      + signUp(email : String, password : String, name : String, weight : Double)
      + signOut()
    }
  }
}

package "ui" {
  package "screens" {
    class ActivityBoardScreen {
      + showActivityList()
    }
    class ActivityBoardScreenViewModel {
      + loadActivities()
      + addActivity()
      + removeActivity()
    }

    class GardenScreen {
      + showGarden(gardenId : Long)
    }
    class GardenScreenViewModel {
      + requestLocationPermission()
      + updatePermissionStatus(isGranted: Boolean)
      + fetchCurrentLocation(activity: ComponentActivity)
      + checkInitialPermission(activity: ComponentActivity)
      + loadGardenPlants(gardenId : Long)
      + loadGarden(userId : String)
      + saveGarden(garden : Garden)
      + updateGarden(gardenId : Long, garden : Garden)
      + updateGardenPlant(gardenId : Long, plantId : Long, photos : List<String>)
      + getGardenCoordinates(gardenId : Long)
      + removePlant(plantId : Long, gardenId : Long)
      + addPlant(plantId : Long, gardenId : Long, photos : List<String>)
    }

    class PlantScreen {
      + showPlant(PlantId : Long)
    }
    class PlantScreenViewModel {
      + searchPlant(photo : String, latitude : Double, longitude : Double)
      + searchPlant(name : String)
      + searchPlant(name : String)
    }

    class GardenPlantScreen {
          + showGardenPlant(PlantId : Long, GardenId : Long)
    }


    class HomeScreen {
      + showHome()
    }
    class HomeScreenViewModel {
      + loadWeatherData(location : String)
      + getUserInfo()
    }

    class UserProfileScreen {
      + showUserProfile(userId : String)
    }
    class UserProfileScreenViewModel {
      + loadUserProfile(userId : String)
      + updateUserInfo(user : User)
    }
  }

  package "theme" {
    ' Eventuali classi o file relativi al tema grafico, color palette, typography, etc.
    class AppTheme {
    }
  }
}

package "utils" {
  class FirebaseInitializer {
    + initFirebase()
  }

  class SensorUtils {
    + startStepCounting()
    + stopStepCounting()
    + getGPSLocation() : Location
  }
}

' MainActivity al di fuori dei package data, ui, utils
class MainActivity {
  + onCreate()
}

' =============================================================================
' RELAZIONI
' =============================================================================

' ------------------ Esempio di relazioni tra ViewModel e Repository ------------------
ActivityBoardScreenViewModel --> GardenRepository : uses
GardenScreenViewModel --> GardenPlantRepository : uses

GardenScreenViewModel --> GardenRepository : uses

HomeScreenViewModel --> WeatherRepository : uses
UserProfileScreenViewModel --> AuthRepository : uses
PlantScreenViewModel --> PlantRepository : uses

' ------------------ Esempio di relazioni tra Repository e Service --------------------
GardenRepository --> FirebaseInitializer : uses (CRUD gardens)
AuthRepository --> FirebaseInitializer : uses (login/registration)
WeatherRepository --> OpenWeatherMapService : uses
GardenRepository --> GardenApiService : uses
GardenPlantRepository --> GardenPlantApiService : uses
PlantRepository --> PlantApiService : uses
GardenPlantRepository --> PlantApiService : uses


' ------------------ Esempio di relazioni con SensorUtils (GPS/Accelerometro) ---------
SensorUtils -[hidden]--> HomeScreenViewModel
SensorUtils -[hidden]--> ActivityBoardScreenViewModel
' Se un ViewModel o Repository utilizza direttamente i sensori, puoi rendere visibile la relazione

' ------------------ Esempio di relazioni tra View (Screen) e ViewModel ---------------
ActivityBoardScreen --> ActivityBoardScreenViewModel : observes
GardenScreen --> GardenScreenViewModel : observes
HomeScreen --> HomeScreenViewModel : observes
UserProfileScreen --> UserProfileScreenViewModel : observes
PlantScreen --> PlantScreenViewModel : observes
GardenPlantScreen --> GardenScreenViewModel : observes
' MainActivity come entry point generale (navigator verso le varie screen)
MainActivity --> HomeScreen

@enduml
